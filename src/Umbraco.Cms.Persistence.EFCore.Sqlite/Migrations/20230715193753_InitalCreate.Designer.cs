// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Umbraco.Cms.Persistence.EFCore;

#nullable disable

namespace Umbraco.Cms.Persistence.EFCore.Sqlite.Migrations
{
    [DbContext(typeof(UmbracoInternalDbContext))]
    [Migration("20230715193753_InitalCreate")]
    partial class InitalCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.7");

            modelBuilder.Entity("CmsContentType2ContentType", b =>
                {
                    b.Property<int>("ParentContentTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("parentContentTypeId");

                    b.Property<int>("ChildContentTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("childContentTypeId");

                    b.HasKey("ParentContentTypeId", "ChildContentTypeId");

                    b.HasIndex("ChildContentTypeId");

                    b.ToTable("cmsContentType2ContentType", (string)null);
                });

            modelBuilder.Entity("CmsMember2MemberGroup", b =>
                {
                    b.Property<int>("Member")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MemberGroup")
                        .HasColumnType("INTEGER");

                    b.HasKey("Member", "MemberGroup");

                    b.HasIndex("MemberGroup");

                    b.ToTable("cmsMember2MemberGroup", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsContentNu", b =>
                {
                    b.Property<int>("NodeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("nodeId");

                    b.Property<bool>("Published")
                        .HasColumnType("INTEGER")
                        .HasColumnName("published");

                    b.Property<string>("Data")
                        .HasColumnType("TEXT")
                        .HasColumnName("data");

                    b.Property<byte[]>("DataRaw")
                        .HasColumnType("BLOB")
                        .HasColumnName("dataRaw");

                    b.Property<long>("Rv")
                        .HasColumnType("INTEGER")
                        .HasColumnName("rv");

                    b.HasKey("NodeId", "Published");

                    b.HasIndex(new[] { "Published", "NodeId", "Rv" }, "IX_cmsContentNu_published");

                    b.ToTable("cmsContentNu", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsContentType", b =>
                {
                    b.Property<int>("Pk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("pk");

                    b.Property<string>("Alias")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("alias");

                    b.Property<bool?>("AllowAtRoot")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("allowAtRoot")
                        .HasDefaultValueSql("('0')");

                    b.Property<string>("Description")
                        .HasMaxLength(1500)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("icon");

                    b.Property<bool?>("IsContainer")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("isContainer")
                        .HasDefaultValueSql("('0')");

                    b.Property<bool?>("IsElement")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("isElement")
                        .HasDefaultValueSql("('0')");

                    b.Property<int>("NodeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("nodeId");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("thumbnail")
                        .HasDefaultValueSql("('folder.png')");

                    b.Property<int>("Variations")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("variations")
                        .HasDefaultValueSql("('1')");

                    b.HasKey("Pk");

                    b.HasIndex(new[] { "NodeId" }, "IX_cmsContentType")
                        .IsUnique();

                    b.HasIndex(new[] { "Icon" }, "IX_cmsContentType_icon");

                    b.ToTable("cmsContentType", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsContentTypeAllowedContentType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AllowedId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("('0')");

                    b.HasKey("Id", "AllowedId");

                    b.HasIndex("AllowedId");

                    b.ToTable("cmsContentTypeAllowedContentType", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsDictionary", b =>
                {
                    b.Property<int>("Pk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("pk");

                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("key");

                    b.Property<Guid?>("Parent")
                        .HasColumnType("TEXT")
                        .HasColumnName("parent");

                    b.HasKey("Pk");

                    b.HasIndex(new[] { "Parent" }, "IX_cmsDictionary_Parent");

                    b.HasIndex(new[] { "Id" }, "IX_cmsDictionary_id")
                        .IsUnique();

                    b.HasIndex(new[] { "Key" }, "IX_cmsDictionary_key")
                        .IsUnique();

                    b.ToTable("cmsDictionary", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsDocumentType", b =>
                {
                    b.Property<int>("ContentTypeNodeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("contentTypeNodeId");

                    b.Property<int>("TemplateNodeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("templateNodeId");

                    b.Property<bool?>("IsDefault")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("('0')");

                    b.HasKey("ContentTypeNodeId", "TemplateNodeId");

                    b.HasIndex("TemplateNodeId");

                    b.ToTable("cmsDocumentType", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsLanguageText", b =>
                {
                    b.Property<int>("Pk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("pk");

                    b.Property<int>("LanguageId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("languageId");

                    b.Property<Guid>("UniqueId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.HasKey("Pk");

                    b.HasIndex("UniqueId");

                    b.HasIndex(new[] { "LanguageId", "UniqueId" }, "IX_cmsLanguageText_languageId")
                        .IsUnique();

                    b.ToTable("cmsLanguageText", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsMacro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("MacroAlias")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("macroAlias");

                    b.Property<bool?>("MacroCacheByPage")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("macroCacheByPage")
                        .HasDefaultValueSql("('1')");

                    b.Property<bool?>("MacroCachePersonalized")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("macroCachePersonalized")
                        .HasDefaultValueSql("('0')");

                    b.Property<bool?>("MacroDontRender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("macroDontRender")
                        .HasDefaultValueSql("('0')");

                    b.Property<string>("MacroName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("macroName");

                    b.Property<int>("MacroRefreshRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("macroRefreshRate")
                        .HasDefaultValueSql("('0')");

                    b.Property<string>("MacroSource")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("macroSource");

                    b.Property<int>("MacroType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("macroType");

                    b.Property<bool?>("MacroUseInEditor")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("macroUseInEditor")
                        .HasDefaultValueSql("('0')");

                    b.Property<Guid>("UniqueId")
                        .HasColumnType("TEXT")
                        .HasColumnName("uniqueId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MacroAlias" }, "IX_cmsMacroPropertyAlias")
                        .IsUnique();

                    b.HasIndex(new[] { "UniqueId" }, "IX_cmsMacro_UniqueId")
                        .IsUnique();

                    b.ToTable("cmsMacro", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsMacroProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("EditorAlias")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("editorAlias");

                    b.Property<int>("Macro")
                        .HasColumnType("INTEGER")
                        .HasColumnName("macro");

                    b.Property<string>("MacroPropertyAlias")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("macroPropertyAlias");

                    b.Property<string>("MacroPropertyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("macroPropertyName");

                    b.Property<int>("MacroPropertySortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("macroPropertySortOrder")
                        .HasDefaultValueSql("('0')");

                    b.Property<Guid>("UniquePropertyId")
                        .HasColumnType("TEXT")
                        .HasColumnName("uniquePropertyId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Macro", "MacroPropertyAlias" }, "IX_cmsMacroProperty_Alias")
                        .IsUnique();

                    b.HasIndex(new[] { "UniquePropertyId" }, "IX_cmsMacroProperty_UniquePropertyId")
                        .IsUnique();

                    b.ToTable("cmsMacroProperty", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsMember", b =>
                {
                    b.Property<int>("NodeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("nodeId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("('''')");

                    b.Property<DateTime?>("EmailConfirmedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("emailConfirmedDate");

                    b.Property<int?>("FailedPasswordAttempts")
                        .HasColumnType("INTEGER")
                        .HasColumnName("failedPasswordAttempts");

                    b.Property<bool?>("IsApproved")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("isApproved")
                        .HasDefaultValueSql("('1')");

                    b.Property<bool?>("IsLockedOut")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("isLockedOut")
                        .HasDefaultValueSql("('0')");

                    b.Property<DateTime?>("LastLockoutDate")
                        .HasColumnType("datetime")
                        .HasColumnName("lastLockoutDate");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime")
                        .HasColumnName("lastLoginDate");

                    b.Property<DateTime?>("LastPasswordChangeDate")
                        .HasColumnType("datetime")
                        .HasColumnName("lastPasswordChangeDate");

                    b.Property<string>("LoginName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("('''')");

                    b.Property<string>("Password")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("('''')");

                    b.Property<string>("PasswordConfig")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("passwordConfig");

                    b.Property<string>("SecurityStampToken")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("securityStampToken");

                    b.HasKey("NodeId");

                    b.HasIndex(new[] { "LoginName" }, "IX_cmsMember_LoginName");

                    b.ToTable("cmsMember", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsMemberType", b =>
                {
                    b.Property<int>("Pk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("pk");

                    b.Property<bool?>("IsSensitive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("isSensitive")
                        .HasDefaultValueSql("('0')");

                    b.Property<bool?>("MemberCanEdit")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("memberCanEdit")
                        .HasDefaultValueSql("('0')");

                    b.Property<int>("NodeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PropertytypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("propertytypeId");

                    b.Property<bool?>("ViewOnProfile")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("viewOnProfile")
                        .HasDefaultValueSql("('0')");

                    b.HasKey("Pk");

                    b.HasIndex("NodeId");

                    b.ToTable("cmsMemberType", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsPropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("ContentTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("contentTypeId");

                    b.Property<int>("DataTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("dataTypeId");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<bool?>("LabelOnTop")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("labelOnTop")
                        .HasDefaultValueSql("('0')");

                    b.Property<bool?>("Mandatory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("mandatory")
                        .HasDefaultValueSql("('0')");

                    b.Property<string>("MandatoryMessage")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("mandatoryMessage");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PropertyTypeGroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("propertyTypeGroupId");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("sortOrder")
                        .HasDefaultValueSql("('0')");

                    b.Property<Guid>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("UniqueID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ValidationRegExp")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("validationRegExp");

                    b.Property<string>("ValidationRegExpMessage")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("validationRegExpMessage");

                    b.Property<int>("Variations")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("variations")
                        .HasDefaultValueSql("('1')");

                    b.HasKey("Id");

                    b.HasIndex("ContentTypeId");

                    b.HasIndex("DataTypeId");

                    b.HasIndex("PropertyTypeGroupId");

                    b.HasIndex(new[] { "Alias" }, "IX_cmsPropertyTypeAlias");

                    b.HasIndex(new[] { "UniqueId" }, "IX_cmsPropertyTypeUniqueID")
                        .IsUnique();

                    b.ToTable("cmsPropertyType", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsPropertyTypeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("alias");

                    b.Property<int>("ContenttypeNodeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("contenttypeNodeId");

                    b.Property<int>("Sortorder")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sortorder");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("text");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("type")
                        .HasDefaultValueSql("('0')");

                    b.Property<Guid>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("uniqueID")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("Id");

                    b.HasIndex("ContenttypeNodeId");

                    b.HasIndex(new[] { "UniqueId" }, "IX_cmsPropertyTypeGroupUniqueID")
                        .IsUnique();

                    b.ToTable("cmsPropertyTypeGroup", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("group");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("languageId");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("tag");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Group", "Tag", "LanguageId" }, "IX_cmsTags")
                        .IsUnique();

                    b.HasIndex(new[] { "LanguageId" }, "IX_cmsTags_LanguageId");

                    b.HasIndex(new[] { "LanguageId", "Group" }, "IX_cmsTags_languageId_group");

                    b.ToTable("cmsTags", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsTagRelationship", b =>
                {
                    b.Property<int>("NodeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("nodeId");

                    b.Property<int>("PropertyTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("propertyTypeId");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tagId");

                    b.HasKey("NodeId", "PropertyTypeId", "TagId");

                    b.HasIndex("PropertyTypeId");

                    b.HasIndex(new[] { "TagId", "NodeId" }, "IX_cmsTagRelationship_tagId_nodeId");

                    b.ToTable("cmsTagRelationship", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsTemplate", b =>
                {
                    b.Property<int>("Pk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("pk");

                    b.Property<string>("Alias")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("alias");

                    b.Property<int>("NodeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("nodeId");

                    b.HasKey("Pk");

                    b.HasIndex(new[] { "NodeId" }, "IX_cmsTemplate_nodeId")
                        .IsUnique();

                    b.ToTable("cmsTemplate", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("LoginNodeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("loginNodeId");

                    b.Property<int>("NoAccessNodeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("noAccessNodeId");

                    b.Property<int>("NodeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("nodeId");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updateDate")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("LoginNodeId");

                    b.HasIndex("NoAccessNodeId");

                    b.HasIndex(new[] { "NodeId" }, "IX_umbracoAccess_nodeId")
                        .IsUnique();

                    b.ToTable("umbracoAccess", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoAccessRule", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("AccessId")
                        .HasColumnType("TEXT")
                        .HasColumnName("accessId");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RuleType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("ruleType");

                    b.Property<string>("RuleValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("ruleValue");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updateDate")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("AccessId");

                    b.HasIndex(new[] { "RuleValue", "RuleType", "AccessId" }, "IX_umbracoAccessRule")
                        .IsUnique();

                    b.ToTable("umbracoAccessRule", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("AffectedDetails")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("affectedDetails");

                    b.Property<int>("AffectedUserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("affectedUserId");

                    b.Property<DateTime>("EventDateUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("eventDateUtc")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EventDetails")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("eventDetails");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("eventType");

                    b.Property<string>("PerformingDetails")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("performingDetails");

                    b.Property<string>("PerformingIp")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("performingIp");

                    b.Property<int>("PerformingUserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("performingUserId");

                    b.HasKey("Id");

                    b.ToTable("umbracoAudit", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoCacheInstruction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("InstructionCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("instructionCount")
                        .HasDefaultValueSql("('1')");

                    b.Property<string>("JsonInstruction")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("jsonInstruction");

                    b.Property<string>("Originated")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("originated");

                    b.Property<DateTime>("UtcStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("utcStamp");

                    b.HasKey("Id");

                    b.ToTable("umbracoCacheInstruction", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoConsent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT")
                        .HasColumnName("action");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("comment");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("context");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("Current")
                        .HasColumnType("INTEGER")
                        .HasColumnName("current");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT")
                        .HasColumnName("source");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER")
                        .HasColumnName("state");

                    b.HasKey("Id");

                    b.ToTable("umbracoConsent", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoContent", b =>
                {
                    b.Property<int>("NodeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("nodeId");

                    b.Property<int>("ContentTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("contentTypeId");

                    b.HasKey("NodeId");

                    b.HasIndex("ContentTypeId");

                    b.ToTable("umbracoContent", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoContentSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("action");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("languageId");

                    b.Property<int>("NodeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("nodeId");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("NodeId");

                    b.ToTable("umbracoContentSchedule", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoContentVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<bool>("Current")
                        .HasColumnType("INTEGER")
                        .HasColumnName("current");

                    b.Property<int>("NodeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("nodeId");

                    b.Property<bool?>("PreventCleanup")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("preventCleanup")
                        .HasDefaultValueSql("('0')");

                    b.Property<string>("Text")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("userId");

                    b.Property<DateTime>("VersionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("versionDate")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Current" }, "IX_umbracoContentVersion_Current");

                    b.HasIndex(new[] { "NodeId", "Current" }, "IX_umbracoContentVersion_NodeId");

                    b.ToTable("umbracoContentVersion", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoContentVersionCleanupPolicy", b =>
                {
                    b.Property<int>("ContentTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("contentTypeId");

                    b.Property<int?>("KeepAllVersionsNewerThanDays")
                        .HasColumnType("INTEGER")
                        .HasColumnName("keepAllVersionsNewerThanDays");

                    b.Property<int?>("KeepLatestVersionPerDayForDays")
                        .HasColumnType("INTEGER")
                        .HasColumnName("keepLatestVersionPerDayForDays");

                    b.Property<bool>("PreventCleanup")
                        .HasColumnType("INTEGER")
                        .HasColumnName("preventCleanup");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime")
                        .HasColumnName("updated");

                    b.HasKey("ContentTypeId");

                    b.ToTable("umbracoContentVersionCleanupPolicy", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoContentVersionCultureVariation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int?>("AvailableUserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("availableUserId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<int>("LanguageId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("languageId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("VersionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("versionId");

                    b.HasKey("Id");

                    b.HasIndex("AvailableUserId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_umbracoContentVersionCultureVariation_LanguageId");

                    b.HasIndex(new[] { "VersionId", "LanguageId" }, "IX_umbracoContentVersionCultureVariation_VersionId")
                        .IsUnique();

                    b.ToTable("umbracoContentVersionCultureVariation", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoCreatedPackageSchema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("TEXT")
                        .HasColumnName("packageId");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updateDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_umbracoCreatedPackageSchema_Name")
                        .IsUnique();

                    b.ToTable("umbracoCreatedPackageSchema", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoDataType", b =>
                {
                    b.Property<int>("NodeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("nodeId");

                    b.Property<string>("Config")
                        .HasColumnType("TEXT")
                        .HasColumnName("config");

                    b.Property<string>("DbType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("dbType");

                    b.Property<string>("PropertyEditorAlias")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("propertyEditorAlias");

                    b.HasKey("NodeId");

                    b.ToTable("umbracoDataType", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoDocument", b =>
                {
                    b.Property<int>("NodeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("nodeId");

                    b.Property<bool>("Edited")
                        .HasColumnType("INTEGER")
                        .HasColumnName("edited");

                    b.Property<bool>("Published")
                        .HasColumnType("INTEGER")
                        .HasColumnName("published");

                    b.HasKey("NodeId");

                    b.HasIndex(new[] { "Published" }, "IX_umbracoDocument_Published");

                    b.ToTable("umbracoDocument", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoDocumentCultureVariation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<bool>("Available")
                        .HasColumnType("INTEGER")
                        .HasColumnName("available");

                    b.Property<bool>("Edited")
                        .HasColumnType("INTEGER")
                        .HasColumnName("edited");

                    b.Property<int>("LanguageId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("languageId");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("NodeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("nodeId");

                    b.Property<bool>("Published")
                        .HasColumnType("INTEGER")
                        .HasColumnName("published");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LanguageId" }, "IX_umbracoDocumentCultureVariation_LanguageId");

                    b.HasIndex(new[] { "NodeId", "LanguageId" }, "IX_umbracoDocumentCultureVariation_NodeId")
                        .IsUnique();

                    b.ToTable("umbracoDocumentCultureVariation", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoDocumentVersion", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<bool>("Published")
                        .HasColumnType("INTEGER")
                        .HasColumnName("published");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("templateId");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.HasIndex(new[] { "Id", "Published" }, "IX_umbracoDocumentVersion_id_published");

                    b.HasIndex(new[] { "Published" }, "IX_umbracoDocumentVersion_published");

                    b.ToTable("umbracoDocumentVersion", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int?>("DomainDefaultLanguage")
                        .HasColumnType("INTEGER")
                        .HasColumnName("domainDefaultLanguage");

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("domainName");

                    b.Property<int?>("DomainRootStructureId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("domainRootStructureID");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sortOrder");

                    b.HasKey("Id");

                    b.HasIndex("DomainRootStructureId");

                    b.ToTable("umbracoDomain", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoExternalLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("TEXT")
                        .HasColumnName("loginProvider");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT")
                        .HasColumnName("providerKey");

                    b.Property<string>("UserData")
                        .HasColumnType("TEXT")
                        .HasColumnName("userData");

                    b.Property<Guid>("UserOrMemberKey")
                        .HasColumnType("TEXT")
                        .HasColumnName("userOrMemberKey");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LoginProvider", "UserOrMemberKey" }, "IX_umbracoExternalLogin_LoginProvider")
                        .IsUnique();

                    b.HasIndex(new[] { "LoginProvider", "ProviderKey" }, "IX_umbracoExternalLogin_ProviderKey");

                    b.HasIndex(new[] { "UserOrMemberKey" }, "IX_umbracoExternalLogin_userOrMemberKey");

                    b.ToTable("umbracoExternalLogin", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoExternalLoginToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ExternalLoginId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("externalLoginId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ExternalLoginId", "Name" }, "IX_umbracoExternalLoginToken_Name")
                        .IsUnique();

                    b.ToTable("umbracoExternalLoginToken", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoKeyValue", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("key");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.HasKey("Key");

                    b.ToTable("umbracoKeyValue", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int?>("FallbackLanguageId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fallbackLanguageId");

                    b.Property<bool?>("IsDefaultVariantLang")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("isDefaultVariantLang")
                        .HasDefaultValueSql("('0')");

                    b.Property<string>("LanguageCultureName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("languageCultureName");

                    b.Property<string>("LanguageIsocode")
                        .HasMaxLength(14)
                        .HasColumnType("TEXT")
                        .HasColumnName("languageISOCode");

                    b.Property<bool?>("Mandatory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("mandatory")
                        .HasDefaultValueSql("('0')");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FallbackLanguageId" }, "IX_umbracoLanguage_fallbackLanguageId");

                    b.HasIndex(new[] { "LanguageIsocode" }, "IX_umbracoLanguage_languageISOCode")
                        .IsUnique();

                    b.ToTable("umbracoLanguage", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoLock", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("umbracoLock", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("Datestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EntityType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("entityType");

                    b.Property<string>("LogComment")
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT")
                        .HasColumnName("logComment");

                    b.Property<string>("LogHeader")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("logHeader");

                    b.Property<int>("NodeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Parameters")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("parameters");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "NodeId" }, "IX_umbracoLog");

                    b.HasIndex(new[] { "Datestamp", "UserId", "NodeId" }, "IX_umbracoLog_datestamp");

                    b.HasIndex(new[] { "Datestamp", "LogHeader" }, "IX_umbracoLog_datestamp_logheader");

                    b.ToTable("umbracoLog", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoLogViewerQuery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("query");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_LogViewerQuery_name")
                        .IsUnique();

                    b.ToTable("umbracoLogViewerQuery", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoMediaVersion", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Path")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("path");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id", "Path" }, "IX_umbracoMediaVersion")
                        .IsUnique();

                    b.ToTable("umbracoMediaVersion", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER")
                        .HasColumnName("level");

                    b.Property<Guid?>("NodeObjectType")
                        .HasColumnType("TEXT")
                        .HasColumnName("nodeObjectType");

                    b.Property<int?>("NodeUser")
                        .HasColumnType("INTEGER")
                        .HasColumnName("nodeUser");

                    b.Property<int>("ParentId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("parentId");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT")
                        .HasColumnName("path");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sortOrder");

                    b.Property<string>("Text")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("text");

                    b.Property<bool?>("Trashed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("trashed")
                        .HasDefaultValueSql("('0')");

                    b.Property<Guid>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("uniqueId")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("Id");

                    b.HasIndex("NodeUser");

                    b.HasIndex(new[] { "Level", "ParentId", "SortOrder", "NodeObjectType", "Trashed" }, "IX_umbracoNode_Level");

                    b.HasIndex(new[] { "NodeObjectType", "Trashed" }, "IX_umbracoNode_ObjectType");

                    b.HasIndex(new[] { "NodeObjectType", "Trashed", "SortOrder", "Id" }, "IX_umbracoNode_ObjectType_trashed_sorted");

                    b.HasIndex(new[] { "Path" }, "IX_umbracoNode_Path");

                    b.HasIndex(new[] { "Trashed" }, "IX_umbracoNode_Trashed");

                    b.HasIndex(new[] { "UniqueId" }, "IX_umbracoNode_UniqueId")
                        .IsUnique();

                    b.HasIndex(new[] { "ParentId", "NodeObjectType" }, "IX_umbracoNode_parentId_nodeObjectType");

                    b.ToTable("umbracoNode", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoPropertyDatum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DateValue")
                        .HasColumnType("datetime")
                        .HasColumnName("dateValue");

                    b.Property<decimal?>("DecimalValue")
                        .HasColumnType("decimal(38, 6)")
                        .HasColumnName("decimalValue");

                    b.Property<int?>("IntValue")
                        .HasColumnType("INTEGER")
                        .HasColumnName("intValue");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("languageId");

                    b.Property<int>("PropertyTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("propertyTypeId");

                    b.Property<string>("Segment")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("segment");

                    b.Property<string>("TextValue")
                        .HasColumnType("TEXT")
                        .HasColumnName("textValue");

                    b.Property<string>("VarcharValue")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT")
                        .HasColumnName("varcharValue");

                    b.Property<int>("VersionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("versionId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LanguageId" }, "IX_umbracoPropertyData_LanguageId");

                    b.HasIndex(new[] { "PropertyTypeId" }, "IX_umbracoPropertyData_PropertyTypeId");

                    b.HasIndex(new[] { "Segment" }, "IX_umbracoPropertyData_Segment");

                    b.HasIndex(new[] { "VersionId", "PropertyTypeId", "LanguageId", "Segment" }, "IX_umbracoPropertyData_VersionId")
                        .IsUnique();

                    b.ToTable("umbracoPropertyData", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoRedirectUrl", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("ContentKey")
                        .HasColumnType("TEXT")
                        .HasColumnName("contentKey");

                    b.Property<DateTime>("CreateDateUtc")
                        .HasColumnType("datetime")
                        .HasColumnName("createDateUtc");

                    b.Property<string>("Culture")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("culture");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("url");

                    b.Property<string>("UrlHash")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("urlHash");

                    b.HasKey("Id");

                    b.HasIndex("ContentKey");

                    b.HasIndex(new[] { "UrlHash", "ContentKey", "Culture", "CreateDateUtc" }, "IX_umbracoRedirectUrl")
                        .IsUnique();

                    b.HasIndex(new[] { "CreateDateUtc" }, "IX_umbracoRedirectUrl_culture_hash");

                    b.ToTable("umbracoRedirectUrl", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("ChildId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("childId");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasColumnName("comment");

                    b.Property<DateTime>("Datetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ParentId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("parentId");

                    b.Property<int>("RelType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("relType");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("RelType");

                    b.HasIndex(new[] { "ParentId", "ChildId", "RelType" }, "IX_umbracoRelation_parentChildType")
                        .IsUnique();

                    b.ToTable("umbracoRelation", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoRelationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("alias");

                    b.Property<Guid?>("ChildObjectType")
                        .HasColumnType("TEXT")
                        .HasColumnName("childObjectType");

                    b.Property<bool>("Dual")
                        .HasColumnType("INTEGER")
                        .HasColumnName("dual");

                    b.Property<bool?>("IsDependency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("isDependency")
                        .HasDefaultValueSql("('0')");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentObjectType")
                        .HasColumnType("TEXT")
                        .HasColumnName("parentObjectType");

                    b.Property<Guid>("TypeUniqueId")
                        .HasColumnType("TEXT")
                        .HasColumnName("typeUniqueId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TypeUniqueId" }, "IX_umbracoRelationType_UniqueId")
                        .IsUnique();

                    b.HasIndex(new[] { "Alias" }, "IX_umbracoRelationType_alias")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "IX_umbracoRelationType_name")
                        .IsUnique();

                    b.ToTable("umbracoRelationType", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoServer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("address");

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("computerName");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("isActive");

                    b.Property<bool>("IsSchedulingPublisher")
                        .HasColumnType("INTEGER")
                        .HasColumnName("isSchedulingPublisher");

                    b.Property<DateTime>("LastNotifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("lastNotifiedDate");

                    b.Property<DateTime>("RegisteredDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("registeredDate")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ComputerName" }, "IX_computerName")
                        .IsUnique();

                    b.HasIndex(new[] { "IsActive" }, "IX_umbracoServer_isActive");

                    b.ToTable("umbracoServer", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoTwoFactorLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("TEXT")
                        .HasColumnName("providerName");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("TEXT")
                        .HasColumnName("secret");

                    b.Property<Guid>("UserOrMemberKey")
                        .HasColumnType("TEXT")
                        .HasColumnName("userOrMemberKey");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProviderName", "UserOrMemberKey" }, "IX_umbracoTwoFactorLogin_ProviderName")
                        .IsUnique();

                    b.HasIndex(new[] { "UserOrMemberKey" }, "IX_umbracoTwoFactorLogin_userOrMemberKey");

                    b.ToTable("umbracoTwoFactorLogin", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Avatar")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("avatar");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EmailConfirmedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("emailConfirmedDate");

                    b.Property<int?>("FailedLoginAttempts")
                        .HasColumnType("INTEGER")
                        .HasColumnName("failedLoginAttempts");

                    b.Property<DateTime?>("InvitedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("invitedDate");

                    b.Property<DateTime?>("LastLockoutDate")
                        .HasColumnType("datetime")
                        .HasColumnName("lastLockoutDate");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime")
                        .HasColumnName("lastLoginDate");

                    b.Property<DateTime?>("LastPasswordChangeDate")
                        .HasColumnType("datetime")
                        .HasColumnName("lastPasswordChangeDate");

                    b.Property<string>("PasswordConfig")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("passwordConfig");

                    b.Property<string>("SecurityStampToken")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("securityStampToken");

                    b.Property<string>("TourData")
                        .HasColumnType("TEXT")
                        .HasColumnName("tourData");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updateDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("UserDisabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("userDisabled")
                        .HasDefaultValueSql("('0')");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("userEmail");

                    b.Property<string>("UserLanguage")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("userLanguage");

                    b.Property<string>("UserLogin")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("TEXT")
                        .HasColumnName("userLogin");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("userName");

                    b.Property<bool?>("UserNoConsole")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("userNoConsole")
                        .HasDefaultValueSql("('0')");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("userPassword");

                    b.HasKey("Id")
                        .HasName("PK_user");

                    b.HasIndex(new[] { "UserLogin" }, "IX_umbracoUser_userLogin");

                    b.ToTable("umbracoUser", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoUser2NodeNotify", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("userId");

                    b.Property<int>("NodeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("nodeId");

                    b.Property<string>("Action")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT")
                        .HasColumnName("action")
                        .IsFixedLength();

                    b.HasKey("UserId", "NodeId", "Action");

                    b.HasIndex("NodeId");

                    b.ToTable("umbracoUser2NodeNotify", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoUserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("HasAccessToAllLanguages")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hasAccessToAllLanguages");

                    b.Property<string>("Icon")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("icon");

                    b.Property<int?>("StartContentId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("startContentId");

                    b.Property<int?>("StartMediaId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("startMediaId");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updateDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserGroupAlias")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("userGroupAlias");

                    b.Property<string>("UserGroupDefaultPermissions")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("userGroupDefaultPermissions");

                    b.Property<string>("UserGroupName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("userGroupName");

                    b.HasKey("Id");

                    b.HasIndex("StartContentId");

                    b.HasIndex("StartMediaId");

                    b.HasIndex(new[] { "UserGroupAlias" }, "IX_umbracoUserGroup_userGroupAlias")
                        .IsUnique();

                    b.HasIndex(new[] { "UserGroupName" }, "IX_umbracoUserGroup_userGroupName")
                        .IsUnique();

                    b.ToTable("umbracoUserGroup", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoUserGroup2App", b =>
                {
                    b.Property<int>("UserGroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("userGroupId");

                    b.Property<string>("App")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("app");

                    b.HasKey("UserGroupId", "App")
                        .HasName("PK_userGroup2App");

                    b.ToTable("umbracoUserGroup2App", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoUserGroup2NodePermission", b =>
                {
                    b.Property<int>("UserGroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("userGroupId");

                    b.Property<int>("NodeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("nodeId");

                    b.Property<string>("Permission")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("permission");

                    b.HasKey("UserGroupId", "NodeId", "Permission");

                    b.HasIndex(new[] { "NodeId" }, "IX_umbracoUser2NodePermission_nodeId");

                    b.ToTable("umbracoUserGroup2NodePermission", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoUserLogin", b =>
                {
                    b.Property<Guid>("SessionId")
                        .HasColumnType("TEXT")
                        .HasColumnName("sessionId");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("ipAddress");

                    b.Property<DateTime>("LastValidatedUtc")
                        .HasColumnType("datetime")
                        .HasColumnName("lastValidatedUtc");

                    b.Property<DateTime>("LoggedInUtc")
                        .HasColumnType("datetime")
                        .HasColumnName("loggedInUtc");

                    b.Property<DateTime?>("LoggedOutUtc")
                        .HasColumnType("datetime")
                        .HasColumnName("loggedOutUtc");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("userId");

                    b.HasKey("SessionId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "LastValidatedUtc" }, "IX_umbracoUserLogin_lastValidatedUtc");

                    b.ToTable("umbracoUserLogin", (string)null);
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoUserStartNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("StartNode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("startNode");

                    b.Property<int>("StartNodeType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("startNodeType");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("PK_userStartNode");

                    b.HasIndex("StartNode");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "StartNodeType", "StartNode", "UserId" }, "IX_umbracoUserStartNode_startNodeType")
                        .IsUnique();

                    b.ToTable("umbracoUserStartNode", (string)null);
                });

            modelBuilder.Entity("UmbracoUser2UserGroup", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("userId");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("userGroupId");

                    b.HasKey("UserId", "UserGroupId")
                        .HasName("PK_user2userGroup");

                    b.HasIndex("UserGroupId");

                    b.ToTable("umbracoUser2UserGroup", (string)null);
                });

            modelBuilder.Entity("UmbracoUserGroup2Language", b =>
                {
                    b.Property<int>("UserGroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("userGroupId");

                    b.Property<int>("LanguageId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("languageId");

                    b.HasKey("UserGroupId", "LanguageId")
                        .HasName("PK_userGroup2language");

                    b.HasIndex("LanguageId");

                    b.ToTable("umbracoUserGroup2Language", (string)null);
                });

            modelBuilder.Entity("UmbracoUserGroup2Node", b =>
                {
                    b.Property<int>("UserGroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("userGroupId");

                    b.Property<int>("NodeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("nodeId");

                    b.HasKey("UserGroupId", "NodeId");

                    b.HasIndex(new[] { "NodeId" }, "IX_umbracoUserGroup2Node_nodeId");

                    b.ToTable("umbracoUserGroup2Node", (string)null);
                });

            modelBuilder.Entity("CmsContentType2ContentType", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoNode", null)
                        .WithMany()
                        .HasForeignKey("ChildContentTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_cmsContentType2ContentType_umbracoNode_child");

                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoNode", null)
                        .WithMany()
                        .HasForeignKey("ParentContentTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_cmsContentType2ContentType_umbracoNode_parent");
                });

            modelBuilder.Entity("CmsMember2MemberGroup", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.CmsMember", null)
                        .WithMany()
                        .HasForeignKey("Member")
                        .IsRequired()
                        .HasConstraintName("FK_cmsMember2MemberGroup_cmsMember_nodeId");

                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoNode", null)
                        .WithMany()
                        .HasForeignKey("MemberGroup")
                        .IsRequired()
                        .HasConstraintName("FK_cmsMember2MemberGroup_umbracoNode_id");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsContentNu", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoContent", "Node")
                        .WithMany("CmsContentNus")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Node");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsContentType", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoNode", "Node")
                        .WithOne("CmsContentType")
                        .HasForeignKey("Umbraco.Cms.Persistence.EFCore.Models.CmsContentType", "NodeId")
                        .IsRequired()
                        .HasConstraintName("FK_cmsContentType_umbracoNode_id");

                    b.Navigation("Node");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsContentTypeAllowedContentType", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.CmsContentType", "Allowed")
                        .WithMany("CmsContentTypeAllowedContentTypeAlloweds")
                        .HasForeignKey("AllowedId")
                        .HasPrincipalKey("NodeId")
                        .IsRequired()
                        .HasConstraintName("FK_cmsContentTypeAllowedContentType_cmsContentType1");

                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.CmsContentType", "IdNavigation")
                        .WithMany("CmsContentTypeAllowedContentTypeIdNavigations")
                        .HasForeignKey("Id")
                        .HasPrincipalKey("NodeId")
                        .IsRequired()
                        .HasConstraintName("FK_cmsContentTypeAllowedContentType_cmsContentType");

                    b.Navigation("Allowed");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsDictionary", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.CmsDictionary", "ParentNavigation")
                        .WithMany("InverseParentNavigation")
                        .HasForeignKey("Parent")
                        .HasPrincipalKey("Id")
                        .HasConstraintName("FK_cmsDictionary_cmsDictionary_id");

                    b.Navigation("ParentNavigation");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsDocumentType", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoNode", "ContentTypeNode")
                        .WithMany("CmsDocumentTypes")
                        .HasForeignKey("ContentTypeNodeId")
                        .IsRequired()
                        .HasConstraintName("FK_cmsDocumentType_umbracoNode_id");

                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.CmsContentType", "ContentTypeNodeNavigation")
                        .WithMany("CmsDocumentTypes")
                        .HasForeignKey("ContentTypeNodeId")
                        .HasPrincipalKey("NodeId")
                        .IsRequired()
                        .HasConstraintName("FK_cmsDocumentType_cmsContentType_nodeId");

                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.CmsTemplate", "TemplateNode")
                        .WithMany("CmsDocumentTypes")
                        .HasForeignKey("TemplateNodeId")
                        .HasPrincipalKey("NodeId")
                        .IsRequired()
                        .HasConstraintName("FK_cmsDocumentType_cmsTemplate_nodeId");

                    b.Navigation("ContentTypeNode");

                    b.Navigation("ContentTypeNodeNavigation");

                    b.Navigation("TemplateNode");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsLanguageText", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoLanguage", "Language")
                        .WithMany("CmsLanguageTexts")
                        .HasForeignKey("LanguageId")
                        .IsRequired()
                        .HasConstraintName("FK_cmsLanguageText_umbracoLanguage_id");

                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.CmsDictionary", "Unique")
                        .WithMany("CmsLanguageTexts")
                        .HasForeignKey("UniqueId")
                        .HasPrincipalKey("Id")
                        .IsRequired()
                        .HasConstraintName("FK_cmsLanguageText_cmsDictionary_id");

                    b.Navigation("Language");

                    b.Navigation("Unique");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsMacroProperty", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.CmsMacro", "MacroNavigation")
                        .WithMany("CmsMacroProperties")
                        .HasForeignKey("Macro")
                        .IsRequired()
                        .HasConstraintName("FK_cmsMacroProperty_cmsMacro_id");

                    b.Navigation("MacroNavigation");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsMember", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoContent", "Node")
                        .WithOne("CmsMember")
                        .HasForeignKey("Umbraco.Cms.Persistence.EFCore.Models.CmsMember", "NodeId")
                        .IsRequired();

                    b.Navigation("Node");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsMemberType", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoNode", "Node")
                        .WithMany("CmsMemberTypes")
                        .HasForeignKey("NodeId")
                        .IsRequired()
                        .HasConstraintName("FK_cmsMemberType_umbracoNode_id");

                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.CmsContentType", "NodeNavigation")
                        .WithMany("CmsMemberTypes")
                        .HasForeignKey("NodeId")
                        .HasPrincipalKey("NodeId")
                        .IsRequired()
                        .HasConstraintName("FK_cmsMemberType_cmsContentType_nodeId");

                    b.Navigation("Node");

                    b.Navigation("NodeNavigation");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsPropertyType", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.CmsContentType", "ContentType")
                        .WithMany("CmsPropertyTypes")
                        .HasForeignKey("ContentTypeId")
                        .HasPrincipalKey("NodeId")
                        .IsRequired()
                        .HasConstraintName("FK_cmsPropertyType_cmsContentType_nodeId");

                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoDataType", "DataType")
                        .WithMany("CmsPropertyTypes")
                        .HasForeignKey("DataTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_cmsPropertyType_umbracoDataType_nodeId");

                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.CmsPropertyTypeGroup", "PropertyTypeGroup")
                        .WithMany("CmsPropertyTypes")
                        .HasForeignKey("PropertyTypeGroupId")
                        .HasConstraintName("FK_cmsPropertyType_cmsPropertyTypeGroup_id");

                    b.Navigation("ContentType");

                    b.Navigation("DataType");

                    b.Navigation("PropertyTypeGroup");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsPropertyTypeGroup", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.CmsContentType", "ContenttypeNode")
                        .WithMany("CmsPropertyTypeGroups")
                        .HasForeignKey("ContenttypeNodeId")
                        .HasPrincipalKey("NodeId")
                        .IsRequired()
                        .HasConstraintName("FK_cmsPropertyTypeGroup_cmsContentType_nodeId");

                    b.Navigation("ContenttypeNode");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsTag", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoLanguage", "Language")
                        .WithMany("CmsTags")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_cmsTags_umbracoLanguage_id");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsTagRelationship", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoContent", "Node")
                        .WithMany("CmsTagRelationships")
                        .HasForeignKey("NodeId")
                        .IsRequired()
                        .HasConstraintName("FK_cmsTagRelationship_cmsContent");

                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.CmsPropertyType", "PropertyType")
                        .WithMany("CmsTagRelationships")
                        .HasForeignKey("PropertyTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_cmsTagRelationship_cmsPropertyType");

                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.CmsTag", "Tag")
                        .WithMany("CmsTagRelationships")
                        .HasForeignKey("TagId")
                        .IsRequired()
                        .HasConstraintName("FK_cmsTagRelationship_cmsTags_id");

                    b.Navigation("Node");

                    b.Navigation("PropertyType");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsTemplate", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoNode", "Node")
                        .WithOne("CmsTemplate")
                        .HasForeignKey("Umbraco.Cms.Persistence.EFCore.Models.CmsTemplate", "NodeId")
                        .IsRequired()
                        .HasConstraintName("FK_cmsTemplate_umbracoNode");

                    b.Navigation("Node");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoAccess", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoNode", "LoginNode")
                        .WithMany("UmbracoAccessLoginNodes")
                        .HasForeignKey("LoginNodeId")
                        .IsRequired()
                        .HasConstraintName("FK_umbracoAccess_umbracoNode_id1");

                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoNode", "NoAccessNode")
                        .WithMany("UmbracoAccessNoAccessNodes")
                        .HasForeignKey("NoAccessNodeId")
                        .IsRequired()
                        .HasConstraintName("FK_umbracoAccess_umbracoNode_id2");

                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoNode", "Node")
                        .WithOne("UmbracoAccessNode")
                        .HasForeignKey("Umbraco.Cms.Persistence.EFCore.Models.UmbracoAccess", "NodeId")
                        .IsRequired()
                        .HasConstraintName("FK_umbracoAccess_umbracoNode_id");

                    b.Navigation("LoginNode");

                    b.Navigation("NoAccessNode");

                    b.Navigation("Node");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoAccessRule", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoAccess", "Access")
                        .WithMany("UmbracoAccessRules")
                        .HasForeignKey("AccessId")
                        .IsRequired()
                        .HasConstraintName("FK_umbracoAccessRule_umbracoAccess_id");

                    b.Navigation("Access");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoContent", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.CmsContentType", "ContentType")
                        .WithMany("UmbracoContents")
                        .HasForeignKey("ContentTypeId")
                        .HasPrincipalKey("NodeId")
                        .IsRequired()
                        .HasConstraintName("FK_umbracoContent_cmsContentType_NodeId");

                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoNode", "Node")
                        .WithOne("UmbracoContent")
                        .HasForeignKey("Umbraco.Cms.Persistence.EFCore.Models.UmbracoContent", "NodeId")
                        .IsRequired()
                        .HasConstraintName("FK_umbracoContent_umbracoNode_id");

                    b.Navigation("ContentType");

                    b.Navigation("Node");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoContentSchedule", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoLanguage", "Language")
                        .WithMany("UmbracoContentSchedules")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_umbracoContentSchedule_umbracoLanguage_id");

                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoContent", "Node")
                        .WithMany("UmbracoContentSchedules")
                        .HasForeignKey("NodeId")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Node");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoContentVersion", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoContent", "Node")
                        .WithMany("UmbracoContentVersions")
                        .HasForeignKey("NodeId")
                        .IsRequired();

                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoUser", "User")
                        .WithMany("UmbracoContentVersions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_umbracoContentVersion_umbracoUser_id");

                    b.Navigation("Node");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoContentVersionCleanupPolicy", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.CmsContentType", "ContentType")
                        .WithOne("UmbracoContentVersionCleanupPolicy")
                        .HasForeignKey("Umbraco.Cms.Persistence.EFCore.Models.UmbracoContentVersionCleanupPolicy", "ContentTypeId")
                        .HasPrincipalKey("Umbraco.Cms.Persistence.EFCore.Models.CmsContentType", "NodeId")
                        .IsRequired()
                        .HasConstraintName("FK_umbracoContentVersionCleanupPolicy_cmsContentType_nodeId");

                    b.Navigation("ContentType");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoContentVersionCultureVariation", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoUser", "AvailableUser")
                        .WithMany("UmbracoContentVersionCultureVariations")
                        .HasForeignKey("AvailableUserId")
                        .HasConstraintName("FK_umbracoContentVersionCultureVariation_umbracoUser_id");

                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoLanguage", "Language")
                        .WithMany("UmbracoContentVersionCultureVariations")
                        .HasForeignKey("LanguageId")
                        .IsRequired()
                        .HasConstraintName("FK_umbracoContentVersionCultureVariation_umbracoLanguage_id");

                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoContentVersion", "Version")
                        .WithMany("UmbracoContentVersionCultureVariations")
                        .HasForeignKey("VersionId")
                        .IsRequired()
                        .HasConstraintName("FK_umbracoContentVersionCultureVariation_umbracoContentVersion_id");

                    b.Navigation("AvailableUser");

                    b.Navigation("Language");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoDataType", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoNode", "Node")
                        .WithOne("UmbracoDataType")
                        .HasForeignKey("Umbraco.Cms.Persistence.EFCore.Models.UmbracoDataType", "NodeId")
                        .IsRequired()
                        .HasConstraintName("FK_umbracoDataType_umbracoNode_id");

                    b.Navigation("Node");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoDocument", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoContent", "Node")
                        .WithOne("UmbracoDocument")
                        .HasForeignKey("Umbraco.Cms.Persistence.EFCore.Models.UmbracoDocument", "NodeId")
                        .IsRequired();

                    b.Navigation("Node");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoDocumentCultureVariation", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoLanguage", "Language")
                        .WithMany("UmbracoDocumentCultureVariations")
                        .HasForeignKey("LanguageId")
                        .IsRequired()
                        .HasConstraintName("FK_umbracoDocumentCultureVariation_umbracoLanguage_id");

                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoNode", "Node")
                        .WithMany("UmbracoDocumentCultureVariations")
                        .HasForeignKey("NodeId")
                        .IsRequired()
                        .HasConstraintName("FK_umbracoDocumentCultureVariation_umbracoNode_id");

                    b.Navigation("Language");

                    b.Navigation("Node");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoDocumentVersion", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoContentVersion", "IdNavigation")
                        .WithOne("UmbracoDocumentVersion")
                        .HasForeignKey("Umbraco.Cms.Persistence.EFCore.Models.UmbracoDocumentVersion", "Id")
                        .IsRequired();

                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.CmsTemplate", "Template")
                        .WithMany("UmbracoDocumentVersions")
                        .HasForeignKey("TemplateId")
                        .HasPrincipalKey("NodeId")
                        .HasConstraintName("FK_umbracoDocumentVersion_cmsTemplate_nodeId");

                    b.Navigation("IdNavigation");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoDomain", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoNode", "DomainRootStructure")
                        .WithMany("UmbracoDomains")
                        .HasForeignKey("DomainRootStructureId")
                        .HasConstraintName("FK_umbracoDomain_umbracoNode_id");

                    b.Navigation("DomainRootStructure");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoExternalLoginToken", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoExternalLogin", "ExternalLogin")
                        .WithMany("UmbracoExternalLoginTokens")
                        .HasForeignKey("ExternalLoginId")
                        .IsRequired()
                        .HasConstraintName("FK_umbracoExternalLoginToken_umbracoExternalLogin_id");

                    b.Navigation("ExternalLogin");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoLanguage", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoLanguage", "FallbackLanguage")
                        .WithMany("InverseFallbackLanguage")
                        .HasForeignKey("FallbackLanguageId")
                        .HasConstraintName("FK_umbracoLanguage_umbracoLanguage_id");

                    b.Navigation("FallbackLanguage");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoLog", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoUser", "User")
                        .WithMany("UmbracoLogs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_umbracoLog_umbracoUser_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoMediaVersion", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoContentVersion", "IdNavigation")
                        .WithOne("UmbracoMediaVersion")
                        .HasForeignKey("Umbraco.Cms.Persistence.EFCore.Models.UmbracoMediaVersion", "Id")
                        .IsRequired();

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoNode", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoUser", "NodeUserNavigation")
                        .WithMany("UmbracoNodes")
                        .HasForeignKey("NodeUser")
                        .HasConstraintName("FK_umbracoNode_umbracoUser_id");

                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoNode", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .IsRequired()
                        .HasConstraintName("FK_umbracoNode_umbracoNode_id");

                    b.Navigation("NodeUserNavigation");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoPropertyDatum", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoLanguage", "Language")
                        .WithMany("UmbracoPropertyData")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_umbracoPropertyData_umbracoLanguage_id");

                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.CmsPropertyType", "PropertyType")
                        .WithMany("UmbracoPropertyData")
                        .HasForeignKey("PropertyTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_umbracoPropertyData_cmsPropertyType_id");

                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoContentVersion", "Version")
                        .WithMany("UmbracoPropertyData")
                        .HasForeignKey("VersionId")
                        .IsRequired()
                        .HasConstraintName("FK_umbracoPropertyData_umbracoContentVersion_id");

                    b.Navigation("Language");

                    b.Navigation("PropertyType");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoRedirectUrl", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoNode", "ContentKeyNavigation")
                        .WithMany("UmbracoRedirectUrls")
                        .HasForeignKey("ContentKey")
                        .HasPrincipalKey("UniqueId")
                        .IsRequired()
                        .HasConstraintName("FK_umbracoRedirectUrl_umbracoNode_uniqueID");

                    b.Navigation("ContentKeyNavigation");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoRelation", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoNode", "Child")
                        .WithMany("UmbracoRelationChildren")
                        .HasForeignKey("ChildId")
                        .IsRequired()
                        .HasConstraintName("FK_umbracoRelation_umbracoNode1");

                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoNode", "Parent")
                        .WithMany("UmbracoRelationParents")
                        .HasForeignKey("ParentId")
                        .IsRequired()
                        .HasConstraintName("FK_umbracoRelation_umbracoNode");

                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoRelationType", "RelTypeNavigation")
                        .WithMany("UmbracoRelations")
                        .HasForeignKey("RelType")
                        .IsRequired()
                        .HasConstraintName("FK_umbracoRelation_umbracoRelationType_id");

                    b.Navigation("Child");

                    b.Navigation("Parent");

                    b.Navigation("RelTypeNavigation");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoUser2NodeNotify", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoNode", "Node")
                        .WithMany("UmbracoUser2NodeNotifies")
                        .HasForeignKey("NodeId")
                        .IsRequired()
                        .HasConstraintName("FK_umbracoUser2NodeNotify_umbracoNode_id");

                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoUser", "User")
                        .WithMany("UmbracoUser2NodeNotifies")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_umbracoUser2NodeNotify_umbracoUser_id");

                    b.Navigation("Node");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoUserGroup", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoNode", "StartContent")
                        .WithMany("UmbracoUserGroupStartContents")
                        .HasForeignKey("StartContentId")
                        .HasConstraintName("FK_startContentId_umbracoNode_id");

                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoNode", "StartMedia")
                        .WithMany("UmbracoUserGroupStartMedia")
                        .HasForeignKey("StartMediaId")
                        .HasConstraintName("FK_startMediaId_umbracoNode_id");

                    b.Navigation("StartContent");

                    b.Navigation("StartMedia");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoUserGroup2App", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoUserGroup", "UserGroup")
                        .WithMany("UmbracoUserGroup2Apps")
                        .HasForeignKey("UserGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_umbracoUserGroup2App_umbracoUserGroup_id");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoUserGroup2NodePermission", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoNode", "Node")
                        .WithMany("UmbracoUserGroup2NodePermissions")
                        .HasForeignKey("NodeId")
                        .IsRequired()
                        .HasConstraintName("FK_umbracoUserGroup2NodePermission_umbracoNode_id");

                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoUserGroup", "UserGroup")
                        .WithMany("UmbracoUserGroup2NodePermissions")
                        .HasForeignKey("UserGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_umbracoUserGroup2NodePermission_umbracoUserGroup_id");

                    b.Navigation("Node");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoUserLogin", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoUser", "User")
                        .WithMany("UmbracoUserLogins")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_umbracoUserLogin_umbracoUser_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoUserStartNode", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoNode", "StartNodeNavigation")
                        .WithMany("UmbracoUserStartNodes")
                        .HasForeignKey("StartNode")
                        .IsRequired()
                        .HasConstraintName("FK_umbracoUserStartNode_umbracoNode_id");

                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoUser", "User")
                        .WithMany("UmbracoUserStartNodes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_umbracoUserStartNode_umbracoUser_id");

                    b.Navigation("StartNodeNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UmbracoUser2UserGroup", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoUserGroup", null)
                        .WithMany()
                        .HasForeignKey("UserGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_umbracoUser2UserGroup_umbracoUserGroup_id");

                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_umbracoUser2UserGroup_umbracoUser_id");
                });

            modelBuilder.Entity("UmbracoUserGroup2Language", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoLanguage", null)
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_umbracoUserGroup2Language_umbracoLanguage_id");

                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoUserGroup", null)
                        .WithMany()
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_umbracoUserGroup2Language_umbracoUserGroup_id");
                });

            modelBuilder.Entity("UmbracoUserGroup2Node", b =>
                {
                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoNode", null)
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .IsRequired()
                        .HasConstraintName("FK_umbracoUserGroup2Node_umbracoNode_id");

                    b.HasOne("Umbraco.Cms.Persistence.EFCore.Models.UmbracoUserGroup", null)
                        .WithMany()
                        .HasForeignKey("UserGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_umbracoUserGroup2Node_umbracoUserGroup_id");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsContentType", b =>
                {
                    b.Navigation("CmsContentTypeAllowedContentTypeAlloweds");

                    b.Navigation("CmsContentTypeAllowedContentTypeIdNavigations");

                    b.Navigation("CmsDocumentTypes");

                    b.Navigation("CmsMemberTypes");

                    b.Navigation("CmsPropertyTypeGroups");

                    b.Navigation("CmsPropertyTypes");

                    b.Navigation("UmbracoContentVersionCleanupPolicy");

                    b.Navigation("UmbracoContents");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsDictionary", b =>
                {
                    b.Navigation("CmsLanguageTexts");

                    b.Navigation("InverseParentNavigation");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsMacro", b =>
                {
                    b.Navigation("CmsMacroProperties");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsPropertyType", b =>
                {
                    b.Navigation("CmsTagRelationships");

                    b.Navigation("UmbracoPropertyData");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsPropertyTypeGroup", b =>
                {
                    b.Navigation("CmsPropertyTypes");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsTag", b =>
                {
                    b.Navigation("CmsTagRelationships");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.CmsTemplate", b =>
                {
                    b.Navigation("CmsDocumentTypes");

                    b.Navigation("UmbracoDocumentVersions");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoAccess", b =>
                {
                    b.Navigation("UmbracoAccessRules");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoContent", b =>
                {
                    b.Navigation("CmsContentNus");

                    b.Navigation("CmsMember");

                    b.Navigation("CmsTagRelationships");

                    b.Navigation("UmbracoContentSchedules");

                    b.Navigation("UmbracoContentVersions");

                    b.Navigation("UmbracoDocument");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoContentVersion", b =>
                {
                    b.Navigation("UmbracoContentVersionCultureVariations");

                    b.Navigation("UmbracoDocumentVersion");

                    b.Navigation("UmbracoMediaVersion");

                    b.Navigation("UmbracoPropertyData");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoDataType", b =>
                {
                    b.Navigation("CmsPropertyTypes");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoExternalLogin", b =>
                {
                    b.Navigation("UmbracoExternalLoginTokens");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoLanguage", b =>
                {
                    b.Navigation("CmsLanguageTexts");

                    b.Navigation("CmsTags");

                    b.Navigation("InverseFallbackLanguage");

                    b.Navigation("UmbracoContentSchedules");

                    b.Navigation("UmbracoContentVersionCultureVariations");

                    b.Navigation("UmbracoDocumentCultureVariations");

                    b.Navigation("UmbracoPropertyData");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoNode", b =>
                {
                    b.Navigation("CmsContentType");

                    b.Navigation("CmsDocumentTypes");

                    b.Navigation("CmsMemberTypes");

                    b.Navigation("CmsTemplate");

                    b.Navigation("InverseParent");

                    b.Navigation("UmbracoAccessLoginNodes");

                    b.Navigation("UmbracoAccessNoAccessNodes");

                    b.Navigation("UmbracoAccessNode");

                    b.Navigation("UmbracoContent");

                    b.Navigation("UmbracoDataType");

                    b.Navigation("UmbracoDocumentCultureVariations");

                    b.Navigation("UmbracoDomains");

                    b.Navigation("UmbracoRedirectUrls");

                    b.Navigation("UmbracoRelationChildren");

                    b.Navigation("UmbracoRelationParents");

                    b.Navigation("UmbracoUser2NodeNotifies");

                    b.Navigation("UmbracoUserGroup2NodePermissions");

                    b.Navigation("UmbracoUserGroupStartContents");

                    b.Navigation("UmbracoUserGroupStartMedia");

                    b.Navigation("UmbracoUserStartNodes");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoRelationType", b =>
                {
                    b.Navigation("UmbracoRelations");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoUser", b =>
                {
                    b.Navigation("UmbracoContentVersionCultureVariations");

                    b.Navigation("UmbracoContentVersions");

                    b.Navigation("UmbracoLogs");

                    b.Navigation("UmbracoNodes");

                    b.Navigation("UmbracoUser2NodeNotifies");

                    b.Navigation("UmbracoUserLogins");

                    b.Navigation("UmbracoUserStartNodes");
                });

            modelBuilder.Entity("Umbraco.Cms.Persistence.EFCore.Models.UmbracoUserGroup", b =>
                {
                    b.Navigation("UmbracoUserGroup2Apps");

                    b.Navigation("UmbracoUserGroup2NodePermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
